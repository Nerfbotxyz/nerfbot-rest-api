name: Publish Nerfbot Rest API Docker Image

on:
  push:
    branches: [master]
  release:
    types: [published]

env:
  IMAGE_NAME: nerfbot-rest-api

jobs:
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=staging
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy-release:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.REST_API_DEPLOYER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.REST_API_DEPLOYER_SECRET_KEY }}
          aws-region: us-east-2
    
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition nerfbot-rest-api --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: nerfbot-rest-api
          image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy to Amazon ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: task-definition.json
#           service: nerfbot-rest-api-service
#           cluster: nerfbot-rest-api
#           wait-for-service-stability: true
